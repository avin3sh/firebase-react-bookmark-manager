{"version":3,"sources":["configs/firebase.js","configs/secrets.js","components/Sidebar/index.jsx","components/AppContainer/index.js","components/BookmarkCard/index.jsx","screens/Home.jsx","screens/NewBookmark/index.jsx","screens/Bookmarks/index.jsx","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","auth","GoogleAuthProvider","db","storage","ref","firestore","index","state","uid","_this","props","fetched","categories","url","String","window","location","href","getListCategories","AVAILABLE_CATEGORIES","collection","doc","get","then","querySnapshot","forEach","push","data","category_name","setState","catch","err","console","log","finally","_renderCategories","map","category","react_default","a","createElement","key","className","style","includes","activeLink","this","Link","id","to","Component","color","backgroundColor","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","login","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","signInAnonymously","stop","toggleSidebar","showSidebar","handleResize","height","innerHeight","width","innerWidth","username","user","_this2","onAuthStateChanged","addEventListener","removeEventListener","flex","onClick","position","zIndex","minWidth","maxWidth","display","Sidebar_index","children","is_favorite","bookmark","bookmark_isfavorite","viewType","src","bookmark_url","target","rel","bookmark_note","disabled","class","Date","bookmark_time","toDateString","Home","listname","match","params","filtered_data","filter_query","bookmark_sort","view_type","getUid","Promise","resolve","reject","getBookmarks","done","DATA","record","error","handleFilterQuery","e","_this$setState","name","value","ALL_DATA","trim","length","filter","defineProperty","handleSort","_this$setState2","sort","b","handleView","AppContainer_index","_renderFilterBar","BookmarkCard_index","type","onChange","placeholder","flexDirection","marginLeft","selected","LISTS","label","handleInput","handleListSelect","selectedOption","bookmark_list","save","getTime","writeToDb","TOTAL_CATEGORIES","CATEGORIES_WRITTEN","saving","add","bookmark_category","docRef","handleSuccess","alert","reload","new_bookmark_list","Creatable_default","defaultValue","isMulti","options","classNamePrefix","where","App","BrowserRouter","Route","path","exact","component","NewBookmark","Bookmarks","React","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79854a9b.chunk.js","sourcesContent":["import firebase from 'firebase';\nimport { FIREBASE_API_KEY } from './secrets';\n\nconst config = {\n    apiKey: FIREBASE_API_KEY,\n    authDomain: \"bookmark-manager-b059e.firebaseapp.com\",\n    databaseURL: \"https://bookmark-manager-b059e.firebaseio.com\",\n    projectId: \"bookmark-manager-b059e\",\n    storageBucket: \"bookmark-manager-b059e.appspot.com\",\n    messagingSenderId: \"827874929710\"\n};\n\nfirebase.initializeApp(config);\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport const storageRef = firebase.storage().ref();\nexport const db = firebase.firestore();\nexport default firebase;","export const FIREBASE_API_KEY = \"AIzaSyAoWv_-lJWQY0iMY6cNwFb3SBNan7wO6fE\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport firebase, { db } from '../../configs/firebase';\n\nexport default class index extends Component {\n\n    state = {\n        uid: this.props.uid,\n        fetched: false,\n        categories: [],\n        url: String(window.location.href)\n    }\n\n    getListCategories = () => {\n\n        const AVAILABLE_CATEGORIES = [];\n\n        db.collection(String(this.state.uid)).doc('bookmarks').collection('bookmarkCategories').get()\n            .then(querySnapshot => {\n                querySnapshot.forEach((doc) => {\n                    AVAILABLE_CATEGORIES.push(doc.data().category_name);\n                });\n                this.setState({\n                    fetched: true,\n                    categories: AVAILABLE_CATEGORIES\n                })\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n            .finally(() => {\n\n            })\n\n    }\n\n    componentDidMount() {\n        this.getListCategories();\n    }\n\n    render() {\n        return (\n            <div className=\"sidebarMenu\">\n                <Link id=\"sidebarMenuHome\" to=\"/\">Home</Link>\n                <Link className=\"sidebarMenuItem\" to=\"/new\" style={this.state.url.includes('/new') ? activeLink : null}>Add New</Link>\n                {!this.state.fetched && <span>...</span>}\n                {this.state.fetched && this._renderCategories()}\n            </div>\n        )\n    }\n\n    _renderCategories = () => {\n        return this.state.categories.map((category, index) => {\n            return (\n                <a key={index} className=\"sidebarMenuItem\" href={'/list/' + category} style={this.state.url.includes('/' + category) ? activeLink : null} >{category}</a>\n            )\n        })\n    }\n}\n\nconst activeLink = {\n    color: '#333333',\n    backgroundColor: '#ffff82',\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport firebase, { auth, } from '../../configs/firebase';\n\nimport Sidebar from '../Sidebar';\n\nexport default class index extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            user: null,\n            showSidebar: false,\n            height: window.innerHeight,\n            width: window.innerWidth,\n        }\n    }\n\n    login = async () => {\n        await auth.signInAnonymously();\n    }\n\n\n    componentDidMount() {\n        this.login();\n\n        auth.onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({ user });\n            }\n        });\n\n        this.handleResize();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    toggleSidebar = () => {\n        this.setState({\n            showSidebar: !this.state.showSidebar\n        })\n    }\n\n    handleResize = () => this.setState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    });\n\n    render() {\n\n        return (\n            <div style={{ flex: 1 }}>\n                <div className=\"topMenu\">\n                    <span className=\"topMenuButton\" onClick={this.toggleSidebar}>☰</span>\n                </div>\n                <div className=\"appContainer\">\n                    {this.state.user && (\n                        <div className=\"pageContainer\" style={{ height: this.state.height, width: this.state.width }}>\n                            <div className=\"appSidebar\" style={this.state.showSidebar ? { position: 'absolute', zIndex: 99, minWidth: 150, maxWidth: 300, display: 'flex', height: window.innerHeight } : null}>\n                                <Sidebar uid={this.state.user.uid} />\n                            </div>\n                            <div className=\"appContent\">{this.props.children}</div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport './style.css';\n\nconst IMG_PLACEHOLDER = \"https://countrylakesdental.com/wp-content/uploads/2016/10/orionthemes-placeholder-image.jpg\";\n\nexport default class index extends Component {\n\n    state = {\n        is_favorite: this.props.bookmark.bookmark_isfavorite,\n    }\n\n    render() {\n        const bookmark = this.props.bookmark;\n        return (\n            <div>\n                {this.props.viewType === 'card' && (\n                    <div className=\"bookmarkCard\">\n                        <div className=\"bookmarkImage\"><img src={IMG_PLACEHOLDER} style={{ width: '100%' }} /></div>\n                        <span className=\"bookmarkTitle\"></span>\n                        <span className=\"bookmarkUrl\"><a href={bookmark.bookmark_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"cardUrl\">{bookmark.bookmark_url}</a></span>\n                        <span className=\"bookmarkNote\">{bookmark.bookmark_note}</span>\n                        <div className=\"cardButtons\">\n                            <button style={this.state.is_favorite ? { backgroundColor: '#fffd00' } : null} onClick={() => {\n                                this.setState({ is_favorite: !this.state.is_favorite });\n                            }}>Favorite</button>\n                            <button disabled={true}>Archive</button>\n                            <a href={bookmark.bookmark_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"cardUrlBtn\"><button>Open</button></a>\n                        </div>\n                    </div>\n                )}\n\n                {this.props.viewType === 'list' && (\n                    <div class=\"bookmarkListContainer\">\n                        <div className=\"bookmarkList\">\n                            <span className=\"list-bookmarkDate\">{new Date(bookmark.bookmark_time).toDateString()}</span>\n                            <span className=\"list-bookmarkUrl\"><a href={bookmark.bookmark_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"cardUrl\">{bookmark.bookmark_url}</a></span>\n                            <span className=\"list-bookmarkNote\">{bookmark.bookmark_note}</span>\n                        </div>\n                    </div>\n\n                )}\n\n            </div>\n\n        )\n    }\n}\n\n","import React, { Component } from 'react';\n\nimport AppContainer from '../components/AppContainer';\n\nimport firebase, { auth, db } from '../configs/firebase';\n\nimport BookmarkCard from '../components/BookmarkCard';\n\nexport default class Home extends Component {\n    state = {\n        listname: this.props.match.params.listname,\n        uid: null,\n        data: [],\n        filtered_data: [],\n        fetched: false,\n        filter_query: '',\n        bookmark_sort: 'default',\n        view_type: 'card'\n    }\n\n    componentDidMount() {\n        this.getBookmarks();\n    }\n\n    getUid = () => {\n        return new Promise((resolve, reject) => {\n            auth.onAuthStateChanged((user) => {\n                if (user) {\n                    this.setState({ uid: user.uid }, () => resolve(true));\n                }\n            });\n        })\n    }\n\n    getBookmarks = () => {\n\n        this.getUid()\n            .then((done) => {\n                db.collection(String(this.state.uid)).doc('bookmarks').collection('allBookmarks').get()\n                    .then((querySnapshot) => {\n                        const DATA = []\n                        querySnapshot.forEach(function (doc) {\n                            const record = doc.data().record;\n                            record.id = doc.id;\n                            DATA.push(record);\n                            console.log(doc.data())\n                        });\n                        this.setState({ fetched: true, data: DATA, filtered_data: DATA });\n                    })\n                    .catch(function (error) {\n                        console.log(\"Error getting documents: \", error);\n                    });\n            })\n    }\n\n    handleFilterQuery = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n        const ALL_DATA = this.state.data;\n        let filtered_data;\n        if (value.trim().length == 0) {\n            filtered_data = ALL_DATA;\n        } else {\n            filtered_data = ALL_DATA.filter(bookmark => String(bookmark.bookmark_url + bookmark.bookmark_note).includes(value));\n        }\n\n        this.setState({\n            [key]: value,\n            filtered_data: filtered_data\n        })\n    }\n\n    handleSort = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n\n        const ALL_DATA = this.state.data;\n        let filtered_data = ALL_DATA;\n\n\n        switch (value) {\n            case 'latest':\n                filtered_data.sort(function (a, b) {\n                    return b.bookmark_time - a.bookmark_time;\n                })\n                break;\n            case 'oldest':\n                filtered_data.sort(function (a, b) {\n                    return a.bookmark_time - b.bookmark_time;\n                })\n                break;\n            default: filtered_data = ALL_DATA;\n        }\n\n        this.setState({\n            [key]: value,\n            filtered_data: filtered_data\n        })\n\n\n    }\n\n    handleView = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n\n        this.setState({\n            [key]: value\n        })\n    }\n\n    render() {\n        return (\n            <AppContainer>\n                {!this.state.fetched && <span>Please wait while we get your Bookmarks...</span>}\n                {this.state.fetched && this._renderFilterBar()}\n                <div className={this.state.view_type === 'card' ? 'bookmarkCardContainer' : 'bookmarkListContainer'} >\n                    {this.state.fetched && (\n                        this.state.filtered_data.map((bookmark, index) => {\n                            return <BookmarkCard bookmark={bookmark} key={index} viewType={this.state.view_type} />\n                        })\n                    )}\n                </div>\n            </AppContainer>\n        )\n    }\n\n    _renderFilterBar() {\n        return (\n            <div className=\"filterBar\">\n                <input type=\"text\" name=\"filter_query\" value={this.state.filter_query} onChange={this.handleFilterQuery} placeholder={'Enter your filter keyword'} />\n                <div style={{ flexDirection: 'row', marginLeft: 3 }}>\n                    <span>Sort by</span>\n                    <select name=\"bookmark_sort\" value={this.state.bookmark_sort} onChange={this.handleSort}>\n                        <option value=\"default\">Default</option>\n                        <option value=\"latest\">Latest First</option>\n                        <option value=\"oldest\">Oldest First</option>\n                    </select>\n                </div>\n                <select name=\"view_type\" value={this.state.view_type} onChange={this.handleView} style={{ marginLeft: 5 }}>\n                    <option value=\"card\" selected={true}>card view</option>\n                    <option value=\"list\">list view</option>\n                </select>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/lib/Creatable';\n\nimport './style.css';\n\nimport AppContainer from '../../components/AppContainer';\n\nimport firebase, { auth, db } from '../../configs/firebase';\nimport { write } from 'fs';\n\nconst LISTS = [\n    { value: 'default', label: 'default' },\n];\n\nexport default class index extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            bookmark_url: '',\n            bookmark_list: ['Default'],\n            bookmark_note: '',\n            new_bookmark_list: '',\n            uid: null,\n            saving: false\n        }\n    }\n\n    componentDidMount() {\n        firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({\n                    uid: user.uid\n                })\n            }\n        });\n    }\n\n    handleInput = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n\n        this.setState({ [key]: value })\n    }\n\n    handleListSelect = (selectedOption) => {\n        this.setState({\n            bookmark_list: selectedOption\n        });\n    }\n\n    save = () => {\n        const data = {\n            bookmark_url: this.state.bookmark_url,\n            bookmark_list: this.state.bookmark_list,\n            bookmark_note: this.state.bookmark_note,\n            bookmark_time: new Date().getTime(),\n        }\n\n        this.writeToDb(data);\n    }\n\n    writeToDb = (data) => {\n        const TOTAL_CATEGORIES = data.bookmark_list.length;\n        let CATEGORIES_WRITTEN = 0;\n\n        this.setState({ saving: true });\n\n        const record = {\n            bookmark_url: data.bookmark_url,\n            bookmark_note: data.bookmark_note,\n            bookmark_time: data.bookmark_time,\n            bookmark_isfavorite: false,\n        }\n\n        const AVAILABLE_CATEGORIES = [];\n\n        db.collection(String(this.state.uid)).doc('bookmarks').collection('bookmarkCategories').get()\n            .then(querySnapshot => {\n                querySnapshot.forEach((doc) => {\n                    AVAILABLE_CATEGORIES.push(doc.data().category_name);\n                });\n\n            })\n            .finally(() => {\n                //check if category exists\n                data.bookmark_list.map(category => {\n\n                    if (!AVAILABLE_CATEGORIES.includes(category.value)) {\n                        db.collection(String(this.state.uid)).doc('bookmarks').collection('bookmarkCategories').add({ category_name: category.value })\n                            .then((docRef) => {\n                                db.collection(String(this.state.uid)).doc('bookmarks').collection('allBookmarks').add({ record, bookmark_category: category.value })\n                                    .then((docRef) => {\n                                        CATEGORIES_WRITTEN++;\n                                        if (CATEGORIES_WRITTEN === TOTAL_CATEGORIES) this.handleSuccess();\n                                    })\n                            })\n                    } else {\n                        db.collection(String(this.state.uid)).doc('bookmarks').collection('allBookmarks').add({ record, bookmark_category: category.value })\n                            .then((docRef) => {\n                                CATEGORIES_WRITTEN++;\n                                if (CATEGORIES_WRITTEN === TOTAL_CATEGORIES) this.handleSuccess();\n                            })\n                    }\n\n\n                })\n            })\n    }\n\n    handleSuccess = () => {\n        alert('Bookmark saved!');\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <AppContainer>\n                <div className=\"newbookmarkFormContainer\">\n                    <div className=\"newBookmarkForm\">\n                        <h2 className=\"pageTitle\">Add New Bookmark</h2>\n                        <input type=\"text\" name=\"bookmark_url\" placeholder=\"URL of bookmark\" value={this.state.bookmark_url} onChange={this.handleInput} />\n\n                        <CreatableSelect\n                            defaultValue={LISTS[0]}\n                            isMulti\n                            name=\"bookmark_list\"\n                            options={LISTS}\n                            className=\"basic-multi-select\"\n                            classNamePrefix=\"select\"\n                            onChange={this.handleListSelect}\n                            placeholder=\"Bookmark List category\"\n                        />\n\n                        <textarea name=\"bookmark_note\" placeholder=\"Add additional notes...\" value={this.state.bookmark_note} onChange={this.handleInput} />\n                        <button onClick={this.save}>Save</button>\n                        {this.state.saving && <span>Please wait...</span>}\n                    </div>\n                </div>\n            </AppContainer>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nimport AppContainer from '../../components/AppContainer';\nimport firebase, { db, auth } from '../../configs/firebase';\n\nimport BookmarkCard from '../../components/BookmarkCard';\n\nimport './style.css';\n\nexport default class index extends Component {\n\n    state = {\n        listname: this.props.match.params.listname,\n        uid: null,\n        data: [],\n        filtered_data: [],\n        fetched: false,\n        filter_query: '',\n        bookmark_sort: 'default',\n        view_type: 'card'\n    }\n\n    componentDidMount() {\n        this.getBookmarks();\n    }\n\n    getUid = () => {\n        return new Promise((resolve, reject) => {\n            auth.onAuthStateChanged((user) => {\n                if (user) {\n                    this.setState({ uid: user.uid }, () => resolve(true));\n                }\n            });\n        })\n    }\n\n    getBookmarks = () => {\n\n        this.getUid()\n            .then((done) => {\n                db.collection(String(this.state.uid)).doc('bookmarks').collection('allBookmarks').where('bookmark_category', '==', String(this.state.listname)).get()\n                    .then((querySnapshot) => {\n                        const DATA = []\n                        querySnapshot.forEach(function (doc) {\n                            const record = doc.data().record;\n                            record.id = doc.id;\n                            DATA.push(record);\n                            console.log(doc.data())\n                        });\n                        this.setState({ fetched: true, data: DATA, filtered_data: DATA });\n                    })\n                    .catch(function (error) {\n                        console.log(\"Error getting documents: \", error);\n                    });\n            })\n    }\n\n    handleFilterQuery = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n        const ALL_DATA = this.state.data;\n        let filtered_data;\n        if (value.trim().length == 0) {\n            filtered_data = ALL_DATA;\n        } else {\n            filtered_data = ALL_DATA.filter(bookmark => String(bookmark.bookmark_url + bookmark.bookmark_note).includes(value));\n        }\n\n        this.setState({\n            [key]: value,\n            filtered_data: filtered_data\n        })\n    }\n\n    handleSort = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n\n        const ALL_DATA = this.state.data;\n        let filtered_data = ALL_DATA;\n\n\n        switch (value) {\n            case 'latest':\n                filtered_data.sort(function (a, b) {\n                    return b.bookmark_time - a.bookmark_time;\n                })\n                break;\n            case 'oldest':\n                filtered_data.sort(function (a, b) {\n                    return a.bookmark_time - b.bookmark_time;\n                })\n                break;\n            default: filtered_data = ALL_DATA;\n        }\n\n        this.setState({\n            [key]: value,\n            filtered_data: filtered_data\n        })\n\n\n    }\n\n    handleView = (e) => {\n        const key = e.target.name;\n        const value = e.target.value;\n\n        this.setState({\n            [key]: value\n        })\n    }\n\n    render() {\n        return (\n            <AppContainer>\n                {!this.state.fetched && <span>Please wait while we get your Bookmarks...</span>}\n                {this.state.fetched && this._renderFilterBar()}\n                <div className={this.state.view_type === 'card' ? 'bookmarkCardContainer' : 'bookmarkListContainer'} >\n                    {this.state.fetched && (\n                        this.state.filtered_data.map((bookmark, index) => {\n                            return <BookmarkCard bookmark={bookmark} key={index} viewType={this.state.view_type} />\n                        })\n                    )}\n                </div>\n            </AppContainer>\n        )\n    }\n\n    _renderFilterBar() {\n        return (\n            <div className=\"filterBar\">\n                <input type=\"text\" name=\"filter_query\" value={this.state.filter_query} onChange={this.handleFilterQuery} placeholder={'Enter your filter keyword'} />\n                <div style={{ flexDirection: 'row', marginLeft: 3 }}>\n                    <span>Sort by</span>\n                    <select name=\"bookmark_sort\" value={this.state.bookmark_sort} onChange={this.handleSort}>\n                        <option value=\"default\">Default</option>\n                        <option value=\"latest\">Latest First</option>\n                        <option value=\"oldest\">Oldest First</option>\n                    </select>\n                </div>\n                <select name=\"view_type\" value={this.state.view_type} onChange={this.handleView} style={{ marginLeft: 5 }}>\n                    <option value=\"card\" selected={true}>card view</option>\n                    <option value=\"list\">list view</option>\n                </select>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport Home from './screens/Home';\nimport NewBookmark from './screens/NewBookmark';\nimport Bookmarks from './screens/Bookmarks';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/new\" exact component={NewBookmark} />\n          <Route path=\"/list/:listname\"  exact component={Bookmarks} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}